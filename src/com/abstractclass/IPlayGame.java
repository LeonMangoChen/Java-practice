package com.abstractclass;

public /*abstract*/ interface IPlayGame {
	public /*abstract*/ void playGame();
}
/**
 * 1.接口概念
 * 接口可以理解为一种特殊的类，有全局常量和公共的抽象方法所组成
 * 类是一种具体实现体，而接口定义了某一批类所需要遵守的
 * 规范，接口不关心这些类的内部数据，也不关心这列类里方法的
 * 实现细节，它只规定这些类里必须提供某些方法。
 * 2.接口定义
 * 和类定义不用，定义接口不再使用class关键字，而是使用
 * interface关键字。
 * [修饰符] interface 接口名 [extends 父接口1,父接口2,...]{
 * 		零个到多个常量定义...
 * 		零个到多个抽象方法的定义...
 * }
 * 接口就是用来被继承、被实现的，修饰符一般建议用public
 * 注意:不能使用private和protected修饰接口
 * 3.接口定义
 * 常量：
 * 接口中的属性是常量，即使定义时不添加
 * public static final 修饰符，系统也会自动加上
 * 方法：
 * 接口中的方法只能是抽象方法，总是使用，即使定义时
 * 不添加public abstract修饰符，系统也会自动加上。
 * 4.使用接口
 * 一个类可以实现一个或多个接口，实现接口使用implements
 * 关键字。Java中一个类只能继承一个父类，是不够灵活的，
 * 通过实现多个接口可以做补充。
 * 继承父类实现接口的语法为：
 * [修饰符] class 类名 extends 父类 implements 接口1，接口2...
 * {
 * 	类提部分//如果继承了抽象类，需要实现继承的首相方法；要实现接口中的抽象方法。
 * }
 * 如果要继承父类，继承父类必须在实现接口之前
 * 使用接口：
 * 接口在使用过程当中，还经常与匿名内部类配合使用
 * 匿名内部类就是没有名字的内部类，
 * 多用于关注实现而不关注实现类的名称
 * 语法格式：
 * Interface i = new Interface(){
 * 	public void method(){
 * 		System.out.println("匿名内部类实现接口的方式");
 * 	}
 * }
 */